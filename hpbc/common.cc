// Protocol Buffers - Google's data interchange format
// Copyright 2023 Google LLC.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google LLC nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "hpbc/common.h"
#include "absl/strings/str_replace.h"
#include "hpb/reflection/def.hpp"

namespace hpbc {

    std::string StripExtension(absl::string_view fname) {
        size_t lastdot = fname.find_last_of('.');
        if (lastdot == std::string::npos) {
            return std::string(fname);
        }
        return std::string(fname.substr(0, lastdot));
    }

    std::string ToCIdent(absl::string_view str) {
        return absl::StrReplaceAll(str, {{".", "_"},
                                         {"/", "_"},
                                         {"-", "_"}});
    }

    std::string ToPreproc(absl::string_view str) {
        return absl::AsciiStrToUpper(ToCIdent(str));
    }

    void EmitFileWarning(absl::string_view name, Output &output) {
        output(
                "/* This file was generated by hpbc (the hpb compiler) from the input\n"
                " * file:\n"
                " *\n"
                " *     $0\n"
                " *\n"
                " * Do not edit -- your changes will be discarded when the file is\n"
                " * regenerated. */\n\n",
                name);
    }

    std::string MessageName(hpb::MessageDefPtr descriptor) {
        return ToCIdent(descriptor.full_name());
    }

    std::string FileLayoutName(hpb::FileDefPtr file) {
        return ToCIdent(file.name()) + "_hpb_file_layout";
    }

    std::string CHeaderFilename(hpb::FileDefPtr file) {
        return StripExtension(file.name()) + ".hpb.h";
    }

    std::string MessageInit(absl::string_view full_name) {
        return ToCIdent(full_name) + "_msg_init";
    }

    std::string EnumInit(hpb::EnumDefPtr descriptor) {
        return ToCIdent(descriptor.full_name()) + "_enum_init";
    }

}  // namespace hpbc
